
<div id="header" class="row">
  <div class="col-xs-4 col-sm-2 col-md-2">
    <h1>
      <%= link_to @project.name, root_path %>
    </h1>
  </div>
  <div class="readings col-xs-3 col-sm-2 col-lg-1">
    <button class="btn btn-primary" type="button">
      <%= @project.sensor1_name %> <span id="reading1" class="badge"></span>
    </button>
    <button class="btn btn-primary" type="button">
      <%= @project.sensor2_name %> <span id="reading2" class="badge"></span>
    </button>
  </div>

  <div class="col-xs-2 col-sm-2">
    <span title="Last Updated" id="last_update"></span>
  </div>

  <div class="col-xs-1">
    <button class="btn btn-primary" type="button">
      <span id="status"></span>
    </button>
  </div>
</div>



<div id="chart_row" class="row">
  <div id="chart"></div>
</div>

<script type="text/javascript">

  var data = null;
  var newestTimestamp = null;
  var graph = null;
  var lastGraphRefresh = null;
  var graphRefreshInterval = 10 * 1000; // in milliseconds
  var sensor1Name = "<%= @project.sensor1_name %>";
  var sensor2Name = "<%= @project.sensor2_name %>";

  renewData();

  function renewData() {
    $.ajax({
      dataType: "json",
      url: '<%= project_data_path(@project) %>',
      data: {after: newestTimestamp},
      success: function (json) {
        processData(json);
        setTimeout(renewData, 2000);
      },
      error: function(jqXHR, status, err) {
        $("#status").removeClass().addClass("glyphicon glyphicon-globe bad");
        setTimeout(renewData, 2000);
      }
    });
  }

  function processData(json) {
    if (json.connected) {
      $("#status").removeClass().addClass("glyphicon glyphicon-transfer good");
    } else {
      $("#status").removeClass().addClass("glyphicon glyphicon-ban-circle bad");
    }

    if (json.readings.length > 0) {
      var mappedData = _.map(json.readings, function (r) {
        return [new Date(r.timestamp), to_f(r.value1), to_f(r.value2)];
      });

      if (data == null) {
        data = mappedData;
      } else {
        data = data.concat(mappedData);
      }

      var lastReading = data[data.length - 1];

      if (lastReading) {
        newestTimestamp = lastReading[0];
        $("#reading1").html(round(lastReading[1]));
        $("#reading2").html(round(lastReading[2]));
        $("#last_update").html(formatTime(lastReading[0]));
      }

      if (graph == null) {
        buildGraph();
        lastGraphRefresh = Date.now();
      } else if ((Date.now() - lastGraphRefresh) >= graphRefreshInterval) {
        graph.updateOptions({file: data});
        lastGraphRefresh = Date.now();
      }
    }
  }

  function buildGraph() {
    graph = new Dygraph(document.getElementById("chart"),
        data,
        {
          labels: ["x", sensor1Name, sensor2Name],
          legend: 'always',
          labelsSeparateLines: true,
          ylabel: 'Temperature (F)',
          animatedZooms: true,
          valueFormatter: function(val, opts, seriesName, dygraph, row, col) {
            if (seriesName == "x") {
              var date = new Date(val);
              return "<strong>" + formatTime(date) + "</strong>";
            } else if (seriesName == sensor1Name || seriesName == sensor2Name) {
              return round(val);
            }
          }
        });
  }

  function to_f(v) {
    if (!v || v > 40000)
      return null;

    return (v * 1.8) + 32;
  }

  function round(val) {
    return Math.round(val * 100) / 100.0;
  }

  function formatTime(val) {
    return pad(val.getHours(), '0', 2) + ":" + pad(val.getMinutes(), '0', 2) + ":" + pad(val.getSeconds(), '0', 2);
  }

  function pad(val, str, count) {
    var strVal = val.toString();
    for (var x = 0; x < count - strVal.length; x++) {
      strVal = str + strVal;
    }
    return strVal;
  }

</script>

